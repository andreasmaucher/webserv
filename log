diff --git a/src/http/httpRequest.hpp b/src/http/httpRequest.hpp
new file mode 100644
index 0000000..0519ecb
--- /dev/null
+++ b/src/http/httpRequest.hpp
@@ -0,0 +1 @@
+ 
\ No newline at end of file
diff --git a/src/server/webService.cpp b/src/server/webService.cpp
index 379f613..fe278f8 100644
--- a/src/server/webService.cpp
+++ b/src/server/webService.cpp
@@ -6,7 +6,7 @@
 /*   By: mrizhakov <mrizhakov@student.42.fr>        +#+  +:+       +#+        */
 /*                                                +#+#+#+#+#+   +#+           */
 /*   Created: 2024/09/24 14:17:32 by mrizakov          #+#    #+#             */
-/*   Updated: 2025/01/23 22:34:45 by mrizhakov        ###   ########.fr       */
+/*   Updated: 2025/01/25 17:41:05 by mrizhakov        ###   ########.fr       */
 /*                                                                            */
 /* ************************************************************************** */
 
@@ -168,7 +168,8 @@ void WebService::deleteRequestObject(int &fd, Server &server)
 
 void WebService::closeConnection(int &fd, size_t &i, Server &server)
 {
-    std::cout << "Closing connection on fd: " << fd << std::endl;
+    std::cout << "Closing connection FD: " << fd
+              << " Reason: " << strerror(errno) << std::endl;
 
     close(fd);
     std::cout << "Closed fd: " << fd << std::endl;
@@ -241,23 +242,26 @@ void WebService::setupSockets()
 
 int WebService::start()
 {
+    std::cout << "=== Server Starting ===" << std::endl;
     //
     while (true)
     {
+        std::cout << "Waiting for connections..." << std::endl;
         // poll changes the state of the pfds_vec; POLLOUT is the default state of the sockets (writable) unless theres incoming data detected
         int poll_count = poll(pfds_vec.data(), pfds_vec.size(), -1);
         // TODO: if_cgi then put the timeout in a MACRO
-        //int poll_count = poll(pfds_vec.data(), pfds_vec.size(), 3000);
+        // int poll_count = poll(pfds_vec.data(), pfds_vec.size(), 3000);
 
         if (poll_count == -1)
         {
-            throw std::runtime_error("poll failed");
-            // perror("poll");
-            // exit(1);
+            std::cerr << "Poll error: " << strerror(errno) << std::endl;
+            continue;
         }
         // Run through all existing fds, sending or receiving data depending on POLL status; or create a new connection if fd 0 (listener)
         for (size_t i = 0; i < pfds_vec.size(); i++)
         {
+            std::cout << "Checking FD: " << pfds_vec[i].fd
+                      << " Events: " << pfds_vec[i].revents << std::endl;
             pollfd pollfd_obj = pfds_vec[i];
             Server *server_obj = fd_to_server[pollfd_obj.fd];
             if (pollfd_obj.revents & POLLIN)
@@ -286,11 +290,16 @@ void WebService::receiveRequest(int &fd, size_t &i, Server &server)
 {
     // HttpRequest *request_obj = server.client_fd_to_request[fd];
     //  HttpRequest request_obj = server.getRequestObject(fd);
-    //std::cout << "Receive function called for request on server: " << server.getName() << " - listener fd: " << server.getListenerFd() << " fd from pollfds vector: " << fd << std::endl;
+    // std::cout << "Receive function called for request on server: " << server.getName() << " - listener fd: " << server.getListenerFd() << " fd from pollfds vector: " << fd << std::endl;
 
+    std::cout << "\n=== RECEIVE REQUEST ===\n";
+    std::cout << "FD: " << fd << std::endl;
+    
     if (!server.getRequestObject(fd).complete)
     {
         int nbytes = recv(fd, buf, sizeof buf, 0);
+        std::cout << "Bytes received: " << nbytes << std::endl;
+
         if (nbytes <= 0)
         {
             closeConnection(fd, i, server);
